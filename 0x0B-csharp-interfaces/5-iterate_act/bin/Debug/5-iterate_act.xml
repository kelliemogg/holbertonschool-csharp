<?xml version="1.0"?>
<doc>
    <assembly>
        <name>5-iterate_act</name>
    </assembly>
    <members>
        <member name="T:Base">
            <summary>
            abstract class Base
            </summary>
        </member>
        <member name="P:Base.name">
            <summary>
            declare public string name
            </summary>
        </member>
        <member name="M:Base.ToString">
            <summary>
            overriding ToString
            </summary>
        </member>
        <member name="T:IInteractive">
            <summary>
            Interface Interactive
            </summary>
        </member>
        <member name="M:IInteractive.Interact">
            <summary>
            declare public void Interact()
            </summary>
        </member>
        <member name="T:IBreakable">
            <summary>
            Interface Breakable
            </summary>
        </member>
        <member name="P:IBreakable.durability">
            <summary>
            declare property durability
            </summary>
        </member>
        <member name="M:IBreakable.Break">
            <summary>
            declare public void Break()
            </summary>
        </member>
        <member name="T:ICollectable">
            <summary>
            Interface Collectable
            </summary>
        </member>
        <member name="P:ICollectable.isCollected">
            <summary>
            property isCollected
            </summary>
        </member>
        <member name="M:ICollectable.Collect">
            <summary>
            declare public void Collect()
            </summary>
        </member>
        <member name="T:Door">
            <summary>
            class Door
            </summary>
        </member>
        <member name="M:Door.#ctor(System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Door.Interact">
            <summary>
            override Interact
            </summary>
        </member>
        <member name="T:Decoration">
            <summary>
            class Decoration : Base, IInteractive, IBreakable
            </summary>
        </member>
        <member name="P:Decoration.isQuestItem">
            <summary>
            public bool
            </summary>
        </member>
        <member name="M:Decoration.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Decoration.durability">
            <summary>
            property durability
            </summary>
        </member>
        <member name="M:Decoration.Interact">
            <summary>
            override Interact
            </summary>
        </member>
        <member name="M:Decoration.Break">
            <summary>
            override Break
            </summary>
        </member>
        <member name="T:Key">
            <summary>
            class Key : Base, ICollectable
            </summary>
        </member>
        <member name="P:Key.isCollected">
            <summary>
            property isCollected
            </summary>
        </member>
        <member name="M:Key.#ctor(System.String,System.Boolean)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Key.Collect">
            <summary>
            override Collect
            </summary>
        </member>
        <member name="T:RoomObjects">
            <summary>
            class RoomObjects
            </summary>
        </member>
        <member name="M:RoomObjects.IterateAction(System.Collections.Generic.List{Base},System.Type)">
            <summary>
            take a list of objects, iterate through it, and execute methods depending on what interface that item implements
            </summary>
        </member>
    </members>
</doc>
